#
# Kubernetes node (machine) template based on Ubuntu Cloud Image
#

# VM type: "qemu" or "vz" (on macOS 13 and later)
vmType: qemu

# OpenStack-compatible (cloud-init) disk image.
images:
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"

# Virtual Machine (VM) specification (CPUs, RAM and Disk)
cpus: 2
memory: "2GiB"
disk: "8GiB"

# Networking configuration
# Use limactl create / start --set='.networks[].macAddress="52:55:55:12:34:56"' to set unique mac address to each VM created
# https://github.com/lima-vm/socket_vmnet/tree/v1.1.2#how-to-use-static-ip-addresses
networks:
- lima: shared
  macAddress: "12:34:56:78:9A:BC"

# Port forwarding rules. Expose Kubernetes nodePort range to host
portForwards:
- guestPortRange: [30000, 32767]
  hostPortRange: [30000, 32767]
  hostIP:  "0.0.0.0"

# Use /var/tmp directory on macOS host as local-path-provisioner add-on storage
mountType: 9p
mounts:
- location: "/opt/lima/storage"
  mountPoint: "/storage"
  writable: true
  9p:
    securityModel: "mapped-xattr"

# Enable system-wide (aka rootful)  containerd and its dependencies (BuildKit, Stargz Snapshotter)
containerd:
  system: true
  user: false

provision:
# Add nodes to '/etc/hosts'
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    cat <<EOF | tee -a /etc/hosts
    192.168.105.100 sandbox sandbox.k8s.internal
    192.168.105.101 cp-1
    192.168.105.102 cp-2
    192.168.105.103 cp-3
    192.168.105.104 worker-1
    192.168.105.105 worker-2
    192.168.105.106 worker-3
    EOF


# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    cat <<EOF | tee -a /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    ip_vs
    ip_vs_rr
    ip_vs_wrr
    ip_vs_sh
    EOF
    
    modprobe overlay
    modprobe br_netfilter
    modprobe ip_vs
    modprobe ip_vs_rr
    modprobe ip_vs_wrr
    modprobe ip_vs_sh
    
    cat <<EOF | tee -a /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF
    
    sysctl --system

# Create / Override containerd config and set cgroup driver for runc to systemd
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd-systemd
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    mkdir -p /etc/containerd
    containerd config default > /etc/containerd/config.toml
    sed -i 's#SystemdCgroup = false#SystemdCgroup = true#' /etc/containerd/config.toml
    sed -i 's#sandbox_image = "registry.k8s.io/pause:3.8"#sandbox_image = "registry.k8s.io/pause:3.10"#' /etc/containerd/config.toml

    systemctl restart containerd

# Update installed packages and install packages needed by K8s
# Install kubeadm, kubectl and kubelet
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    K8S_REPO=v1.33
    K8S_VERSION=1.33.3

    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl gpg ipvsadm jq

    curl -fsSL https://pkgs.k8s.io/core:/stable:/${K8S_REPO}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/'${K8S_REPO}'/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    apt-get update
    apt-get install -y kubeadm=${K8S_VERSION}-* kubectl=${K8S_VERSION}-* kubelet=${K8S_VERSION}-*
    apt-mark hold kubeadm kubectl kubelet
    systemctl enable --now kubelet

